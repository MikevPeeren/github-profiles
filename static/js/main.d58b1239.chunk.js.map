{"version":3,"sources":["constants/general.ts","components/SearchForm.tsx","components/ProjectCard.tsx","components/AvatarCard.tsx","constants/avatarcard.ts","api/GithubApiRest.ts","types/GithubRestApi.types.ts","components/GithubProfile.tsx","components/LightDarkMode.tsx","App.tsx","index.tsx"],"names":["GITHUB_REST_API_USERS_URL","SearchForm","props","useState","warningText","setWarningText","inputElement","useRef","setNewGithubUser","handleUsernameSearch","current","value","useEffect","errorText","InputGroup","className","FormControl","ref","onKeyPress","event","key","placeholder","Append","Button","variant","onClick","ProjectCard","repository","Card","Body","Title","name","Subtitle","forks_count","stargazers_count","Text","description","AvatarCard","login","avatarUrl","bio","repositoriesCount","watchingCount","Img","src","searchForGithubProfile","inputFieldGitHubUser","a","axios","get","then","result","data","errors","Error","catch","error","response","status","searchForGithubTopRepositories","params","type","sort","direction","GITHUB_USER","avatar_url","public_repos","followers","GITHUB_TOP_REPOSITORIES","id","created_at","html_url","GithubProfile","setInputFieldGitHubUser","githubUser","setGithubUser","githubTopRepositories","setGithubTopRepositories","setErrorText","message","length","searchForGitHubUser","searchForGithubRepositories","LightDarkMode","useLocalStorage","lightMode","setLightMode","changeLightDarkMode","handleLightDarkMode","body","document","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d58b1239.chunk.js","sourcesContent":["export const GITHUB_PROFILE_HEADER = 'Github Profiles';\n\nexport const GITHUB_REST_API_USERS_URL = 'https://api.github.com/users/';\n","// React\nimport React, { useRef, useState, useEffect } from 'react';\n\n// Bootstrap\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\n\n// CSS\nimport './SearchForm.scss';\n\n// Icons\nimport { FaSearch } from 'react-icons/fa';\n\ninterface SearchFormProps {\n\tsetNewGithubUser: Function;\n\terrorText: string;\n}\n\nconst SearchForm: React.FC<SearchFormProps> = (props) => {\n\tconst [warningText, setWarningText] = useState('');\n\tconst inputElement = useRef(null);\n\n\tconst { setNewGithubUser } = props;\n\n\tconst handleUsernameSearch = () => {\n\t\tsetWarningText('');\n\t\t//@ts-ignore\n\t\tif (inputElement && inputElement.current && inputElement.current.value !== '')\n\t\t\t//@ts-ignore\n\t\t\tsetNewGithubUser(inputElement.current.value);\n\t\telse setWarningText('Error');\n\t};\n\n\tuseEffect(() => {\n\t\tsetWarningText(props.errorText);\n\t}, [props.errorText]);\n\n\treturn (\n\t\t<>\n\t\t\t<InputGroup className=\"SearchForm\">\n\t\t\t\t<FormControl\n\t\t\t\t\tref={inputElement}\n\t\t\t\t\tonKeyPress={(event: any) => {\n\t\t\t\t\t\tif (event.key === 'Enter') {\n\t\t\t\t\t\t\thandleUsernameSearch();\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t\tplaceholder=\"Github Username\"\n\t\t\t\t/>\n\t\t\t\t<InputGroup.Append>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"light\"\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\thandleUsernameSearch();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<FaSearch />\n\t\t\t\t\t</Button>\n\t\t\t\t</InputGroup.Append>\n\t\t\t</InputGroup>\n\t\t\t{warningText && <span className=\"SearchForm__WarningText\">{warningText}</span>}\n\t\t</>\n\t);\n};\n\nexport default SearchForm;\n","// React\nimport React from 'react';\n\n// Bootstrap\nimport Card from 'react-bootstrap/Card';\n\n// CSS\nimport './ProjectCard.scss';\n\n// Icons\nimport { GoGitBranch, GoStar } from 'react-icons/go';\n\ninterface ProjectCardProps {\n\trepository: {\n\t\tid: string;\n\t\tname?: string;\n\t\tdescription?: string;\n\t\turl?: string;\n\t\tforks_count?: number;\n\t\tstargazers_count?: number;\n\t};\n}\n\nconst ProjectCard: React.FC<ProjectCardProps> = (props) => {\n\tconst { repository } = props;\n\n\treturn (\n\t\t<Card className=\"ProjectCard\">\n\t\t\t<Card.Body>\n\t\t\t\t<Card.Title>{repository.name}</Card.Title>\n\t\t\t\t<Card.Subtitle className=\"mb-2 text-muted\">\n\t\t\t\t\t<span>\n\t\t\t\t\t\t<GoGitBranch /> {repository.forks_count}\n\t\t\t\t\t</span>\n\t\t\t\t\t<span className=\"ProjectCard__CardSubtitle--span\">\n\t\t\t\t\t\t<GoStar /> {repository.stargazers_count}\n\t\t\t\t\t</span>\n\t\t\t\t</Card.Subtitle>\n\t\t\t\t<Card.Text>{repository.description}</Card.Text>\n\t\t\t</Card.Body>\n\t\t</Card>\n\t);\n};\n\nexport default ProjectCard;\n","// React\nimport React from 'react';\n\n// Bootstrap\nimport Card from 'react-bootstrap/Card';\n\n// CSS\nimport './AvatarCard.scss';\n\n// Constants\nimport { WATCHING, REPOSITORIES } from '../constants/avatarcard';\n\n// Icons\nimport { FaGithub, FaUsers } from 'react-icons/fa';\nimport { GoRepoForked } from 'react-icons/go';\n\ninterface AvatarCardProps {\n\tlogin: string;\n\tavatarUrl?: string;\n\tbio?: string;\n\trepositoriesCount?: number;\n\twatchingCount?: number;\n}\n\nconst AvatarCard: React.FC<AvatarCardProps> = (props) => {\n\tconst { login, avatarUrl, bio, repositoriesCount, watchingCount } = props;\n\n\treturn (\n\t\t<div className=\"AvatarCard\">\n\t\t\t<Card>\n\t\t\t\t<Card.Img variant=\"top\" src={avatarUrl} />\n\t\t\t\t<Card.Body className=\"AvatarCard__Card--body\">\n\t\t\t\t\t<Card.Title>{login}</Card.Title>\n\t\t\t\t\t<Card.Subtitle className=\"mb-2 text-muted\">{bio}</Card.Subtitle>\n\t\t\t\t</Card.Body>\n\t\t\t</Card>\n\n\t\t\t<div className=\"AvatarCard__Username\">\n\t\t\t\t<FaGithub />\n\t\t\t\t<span>{login}</span>\n\t\t\t</div>\n\t\t\t<div className=\"AvatarCard__Watching\">\n\t\t\t\t<FaUsers />\n\t\t\t\t<span>\n\t\t\t\t\t{watchingCount} {WATCHING}\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t\t<div className=\"AvatarCard__Repositories\">\n\t\t\t\t<GoRepoForked />\n\t\t\t\t<span>\n\t\t\t\t\t{repositoriesCount} {REPOSITORIES}\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default AvatarCard;\n","export const WATCHING = 'Followers';\nexport const REPOSITORIES = 'Repositories';\n","// Api\nimport axios from 'axios';\n\nimport { GITHUB_REST_API_USERS_URL } from '../constants/general';\n\n/**\n * Search through the Github Rest API to find a Github User.\n *\n * @param {string} inputFieldGitHubUser\n * @returns {array}\n */\nexport const searchForGithubProfile = async (inputFieldGitHubUser: string) => {\n\treturn await axios\n\t\t.get(`${GITHUB_REST_API_USERS_URL}${inputFieldGitHubUser}`)\n\t\t.then((result) => {\n\t\t\tif (result.data.errors) throw new Error('Invalid Query Provided.');\n\t\t\treturn result.data;\n\t\t})\n\t\t.catch((error) => {\n\t\t\t// Up Up and Away\n\t\t\tif (error.response && error.response.status === 404) throw new Error('User could not be Found!');\n\t\t\t// Up Up and Away\n\t\t\tif (error.response && error.response.status === 403) throw new Error('API Rate Limit has been reached!');\n\t\t\t// Up Up and Away\n\t\t\telse throw error;\n\t\t});\n};\n\n/**\n * Search through the Github Rest API to find all the repositories of a Github User.\n *\n * @param {string} inputFieldGitHubUser\n * @returns {array}\n */\nexport const searchForGithubTopRepositories = async (inputFieldGitHubUser: string) => {\n\treturn await axios\n\t\t.get(`${GITHUB_REST_API_USERS_URL}${inputFieldGitHubUser}/repos`, {\n\t\t\tparams: {\n\t\t\t\ttype: 'owner',\n\t\t\t\tsort: 'created',\n\t\t\t\tdirection: 'desc',\n\t\t\t},\n\t\t})\n\t\t.then((result) => {\n\t\t\tif (result.data.errors) throw new Error('Invalid Query Provided.');\n\t\t\treturn result.data;\n\t\t})\n\t\t.catch((error) => {\n\t\t\t// Up Up and Away\n\t\t\tif (error.response && error.response.status === 404) throw new Error('User could not be Found!');\n\t\t\t// Up Up and Away\n\t\t\tif (error.response && error.response.status === 403) throw new Error('API Rate Limit has been reached!');\n\t\t\t// Up Up and Away\n\t\t\telse throw error;\n\t\t});\n};\n","export const GITHUB_USER = {\n\tlogin: '',\n\tavatar_url: '',\n\tbio: '',\n\tpublic_repos: 0,\n\tfollowers: 0,\n};\n\nexport const GITHUB_TOP_REPOSITORIES = [\n\t{\n\t\tid: '',\n\t\tname: '',\n\t\tcreated_at: '',\n\t\tdescription: '',\n\t\thtml_url: '',\n\t\tforks_count: 0,\n\t\tstargazers_count: 0,\n\t},\n];\n","// React\nimport React, { useState, useEffect } from 'react';\n\n// CSS\nimport './GithubProfile.scss';\n\n// Constants\nimport { GITHUB_PROFILE_HEADER } from '../constants/general';\n\n// Components\nimport SearchForm from './SearchForm';\nimport ProjectCard from './ProjectCard';\nimport AvatarCard from './AvatarCard';\n\n// Api\n// Changed GraphQL to Rest Api as authenticating through Github Pages with React is too complex for this Project.\n// import { searchForGithubProfile, searchForGithubTopRepositories } from '../api/GithubApiGraphQL';\nimport { searchForGithubProfile, searchForGithubTopRepositories } from '../api/GithubApiRest';\n\n// Types\n// Changed GraphQL to Rest Api as authenticating through Github Pages with React is too complex for this Project.\n// import { GITHUB_USER, GITHUB_TOP_REPOSITORIES } from '../types/GithubGraphQL.types';\nimport { GITHUB_USER, GITHUB_TOP_REPOSITORIES } from '../types/GithubRestApi.types';\n\nconst GithubProfile = () => {\n\tconst [inputFieldGitHubUser, setInputFieldGitHubUser] = useState('');\n\tconst [githubUser, setGithubUser] = useState(GITHUB_USER);\n\tconst [githubTopRepositories, setGithubTopRepositories] = useState(GITHUB_TOP_REPOSITORIES);\n\tconst [errorText, setErrorText] = useState('');\n\n\tuseEffect(() => {\n\t\t/**\n\t\t * Searches through the Github GraphQL Database for the User.\n\t\t */\n\t\tasync function searchForGitHubUser() {\n\t\t\ttry {\n\t\t\t\tconst result = await searchForGithubProfile(inputFieldGitHubUser);\n\t\t\t\tsetGithubUser(result);\n\t\t\t\tsetErrorText('');\n\t\t\t} catch (error) {\n\t\t\t\tsetGithubUser(GITHUB_USER);\n\t\t\t\tsetErrorText('');\n\t\t\t\tsetErrorText(error.message);\n\t\t\t}\n\t\t}\n\n\t\tif (inputFieldGitHubUser.length !== 0) searchForGitHubUser();\n\t}, [inputFieldGitHubUser]);\n\n\tuseEffect(() => {\n\t\t/**\n\t\t * Searches through the Github GraphQL Database for the repositories of the User.\n\t\t */\n\t\tasync function searchForGithubRepositories() {\n\t\t\ttry {\n\t\t\t\tconst result = await searchForGithubTopRepositories(inputFieldGitHubUser);\n\t\t\t\tsetGithubTopRepositories(result);\n\t\t\t\tsetErrorText('');\n\t\t\t} catch (error) {\n\t\t\t\tsetGithubTopRepositories(GITHUB_TOP_REPOSITORIES);\n\t\t\t\tsetErrorText('');\n\t\t\t\tsetErrorText(error.message);\n\t\t\t}\n\t\t}\n\n\t\tif (inputFieldGitHubUser.length !== 0) searchForGithubRepositories();\n\t}, [inputFieldGitHubUser]);\n\n\t/**\n\t * Updates the State of Github User\n\t *\n\t * @param {string} githubUser\n\t * @returns {void}\n\t */\n\tconst setNewGithubUser = (githubUser: string) => {\n\t\tsetInputFieldGitHubUser(githubUser);\n\t};\n\n\treturn (\n\t\t<div className=\"GithubProfiles\">\n\t\t\t<div className=\"GithubProfiles__SearchForm\">\n\t\t\t\t<header className=\"GithubProfiles__SearchForm--header\">\n\t\t\t\t\t<p>{GITHUB_PROFILE_HEADER}</p>\n\t\t\t\t</header>\n\t\t\t\t<SearchForm setNewGithubUser={setNewGithubUser} errorText={errorText} />\n\t\t\t</div>\n\t\t\t<div className=\"GithubProfiles__GithubContainer\">\n\t\t\t\t<div className=\"GithubProfiles__GithubContainer--Wrapper\">\n\t\t\t\t\t<div className=\"GithubProfiles__GithubContainer--Avatar\">\n\t\t\t\t\t\t{githubUser.login && (\n\t\t\t\t\t\t\t<AvatarCard\n\t\t\t\t\t\t\t\tlogin={githubUser.login}\n\t\t\t\t\t\t\t\tavatarUrl={githubUser.avatar_url}\n\t\t\t\t\t\t\t\tbio={githubUser.bio}\n\t\t\t\t\t\t\t\trepositoriesCount={githubUser.public_repos}\n\t\t\t\t\t\t\t\twatchingCount={githubUser.followers}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"GithubProfiles__GithubContainer--Repositories\">\n\t\t\t\t\t\t<div className=\"GithubProfiles__GithubContainer--RepositoriesFirstRow\">\n\t\t\t\t\t\t\t{githubTopRepositories[0] && githubTopRepositories[0].id && (\n\t\t\t\t\t\t\t\t<ProjectCard repository={githubTopRepositories[0]} />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t{githubTopRepositories[1] && githubTopRepositories[1].id && (\n\t\t\t\t\t\t\t\t<ProjectCard repository={githubTopRepositories[1]} />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"GithubProfiles__GithubContainer--RepositoriesSecondRow\">\n\t\t\t\t\t\t\t{githubTopRepositories[2] && githubTopRepositories[2].id && (\n\t\t\t\t\t\t\t\t<ProjectCard repository={githubTopRepositories[2]} />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t{githubTopRepositories[3] && githubTopRepositories[3].id && (\n\t\t\t\t\t\t\t\t<ProjectCard repository={githubTopRepositories[3]} />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default GithubProfile;\n","// React\nimport React, { useEffect } from 'react';\nimport { useLocalStorage } from 'beautiful-react-hooks';\n\n// CSS\nimport './LightDarkMode.scss';\n\n// Icons\nimport { GiSunflower, GiEvilMoon } from 'react-icons/gi';\n\nconst LightDarkMode = () => {\n\tconst [lightMode, setLightMode] = useLocalStorage('LightMode', 'light-mode');\n\n\tuseEffect(() => {\n\t\tchangeLightDarkMode(lightMode);\n\t}, [lightMode]);\n\n\tconst handleLightDarkMode = () => {\n\t\tsetLightMode(lightMode === 'dark-mode' ? 'light-mode' : 'dark-mode');\n\t};\n\n\tconst changeLightDarkMode = (lightMode: string) => {\n\t\tconst body = document.body;\n\t\tif (body && body.className) {\n\t\t\tbody.className = lightMode;\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className=\"LightDarkMode\">\n\t\t\t{lightMode && (\n\t\t\t\t<GiEvilMoon\n\t\t\t\t\tclassName=\"LightDarkMode__Icon\"\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\thandleLightDarkMode();\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t)}\n\t\t\t{!lightMode && (\n\t\t\t\t<GiSunflower\n\t\t\t\t\tclassName=\"LightDarkMode__Icon\"\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\thandleLightDarkMode();\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default LightDarkMode;\n","// React\nimport React from 'react';\n\n// CSS\nimport './App.scss';\n\n// Components\nimport GithubProfile from './components/GithubProfile';\nimport LightDarkMode from './components/LightDarkMode';\n\nconst App = () => {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<GithubProfile />\n\t\t\t<LightDarkMode />\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// React\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n// CSS\nimport './index.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// Component\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}